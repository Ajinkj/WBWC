from flask import Flask, render_template, request
import RPi.GPIO as GPIO
import cv2
import base64
import tensorflow.keras as keras
import numpy as np

app = Flask(__name__)
GPIO.setmode(GPIO.BCM)
GPIO.setup(2, GPIO.OUT)
GPIO.setup(3, GPIO.OUT)
GPIO.setup(4, GPIO.OUT)

camera = cv2.VideoCapture(0)
model = keras.models.load_model('model.h5')

def gen_frame():
    success, frame = camera.read()
    if not success:
        return None
    else:
        _, buffer = cv2.imencode('.jpg', frame)
        image_str = base64.b64encode(buffer).decode()
        return image_str

def predict(image):
    img = cv2.imdecode(np.fromstring(base64.b64decode(image), dtype=np.uint8), cv2.IMREAD_COLOR)
    img = cv2.resize(img, (224, 224))
    img = np.expand_dims(img, axis=0)
    pred = model.predict(img)
    if pred > 0.5:
        return 'Plastic bottle is present'
    else:
        return 'No plastic bottle'

@app.route('/')
def index():
    image = gen_frame()
    prediction = predict(image)
    return render_template('index.html', image=image, prediction=prediction)

@app.route('/forward')
def forward():
    GPIO.output(2, GPIO.HIGH)
    GPIO.output(3, GPIO.LOW)
    GPIO.output(4, GPIO.HIGH)
    return 'Moving forward'

@app.route('/backward')
def backward():
    GPIO.output(2, GPIO.LOW)
    GPIO.output(3, GPIO.HIGH)
    GPIO.output(4, GPIO.HIGH)
    return 'Moving backward'

@app.route('/left')
def left():
    GPIO.output(2, GPIO.HIGH)
    GPIO.output(3, GPIO.LOW)
    GPIO.output(4, GPIO.LOW)
    return 'Moving left'

@app.route('/right')
def right():
    GPIO.output(2, GPIO.LOW)
    GPIO.output(3, GPIO.HIGH)
    GPIO.output(4, GPIO.LOW)
    return 'Moving right'

@app.route('/stop')
def stop():
    GPIO.output(2, GPIO.LOW)
    GPIO.output(3, GPIO.LOW)
    GPIO.output(4, GPIO.LOW)
    return 'Stopped'

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0')





Code to display camera feed:
<img id="video_feed" src="data:image/jpg;base64,{{ image }}" width="640" height="480" />
<p>{{ prediction }}</p>
